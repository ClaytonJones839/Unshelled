{"ast":null,"code":"var _jsxFileName = \"/Users/clay/Desktop/Unshelled/client/src/components/reviews/ReviewNew.js\";\nimport React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\"; // import gql from \"graphql-tag\";\n\nimport Queries from \"../../graphql/queries\";\nimport Mutations from \"../../graphql/mutations\";\nconst FETCH_REVIEWS = Queries.FETCH_REVIEWS;\nconst NEW_REVIEW = Mutations.NEW_REVIEW;\n\nclass ReviewNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: \"\",\n      rating: 0,\n      restaurantId: this.props.restaurantId,\n      message: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  update(type) {\n    return e => {\n      this.setState({\n        [type]: e.target.value\n      });\n    };\n  }\n\n  handleSubmit(e, newReview) {\n    e.preventDefault();\n    let body = this.state.body;\n    newReview({\n      variables: {\n        body: body,\n        rating: parseInt(this.state.rating),\n        restaurantId: this.state.restaurantId\n      }\n    }).then(data => {\n      this.setState({\n        message: \"New review created successfully\",\n        body: \"\"\n      });\n      setTimeout(() => document.location.reload(true), 1000);\n    });\n  }\n\n  updateCache(cache, {\n    data: {\n      newReview\n    }\n  }) {\n    let reviews;\n\n    try {\n      reviews = cache.readQuery({\n        query: FETCH_REVIEWS\n      });\n    } catch (err) {\n      return;\n    }\n\n    if (reviews) {\n      let reviewArray = reviews.reviews;\n      cache.writeQuery({\n        query: FETCH_REVIEWS,\n        data: {\n          reviews: reviewArray.concat(newReview)\n        }\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(Mutation, {\n      mutation: NEW_REVIEW,\n      update: (cache, data) => this.updateCache(cache, data),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, (newReview, {\n      data\n    }) => React.createElement(\"div\", {\n      className: \"new-review-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"review-form-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"New Review\"), React.createElement(\"form\", {\n      onSubmit: e => this.handleSubmit(e, newReview),\n      className: \"inner-review-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"far fa-star\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"textarea\", {\n      className: \"review-form-textarea\",\n      value: this.state.description,\n      onChange: this.update(\"body\"),\n      placeholder: \"Review goes here (Optional)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"create-review-btn\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Create Review\")), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.state.message)));\n  }\n\n}\n\nexport default ReviewNew;","map":{"version":3,"sources":["/Users/clay/Desktop/Unshelled/client/src/components/reviews/ReviewNew.js"],"names":["React","Component","Mutation","Queries","Mutations","FETCH_REVIEWS","NEW_REVIEW","ReviewNew","constructor","props","state","body","rating","restaurantId","message","handleSubmit","bind","update","type","e","setState","target","value","newReview","preventDefault","variables","parseInt","then","data","setTimeout","document","location","reload","updateCache","cache","reviews","readQuery","query","err","reviewArray","writeQuery","concat","render","description"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\n// import gql from \"graphql-tag\";\nimport Queries from \"../../graphql/queries\";\nimport Mutations from \"../../graphql/mutations\";\nconst { FETCH_REVIEWS } = Queries;\nconst { NEW_REVIEW } = Mutations;\n\nclass ReviewNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      body: \"\",\n      rating: 0,\n      restaurantId: this.props.restaurantId,\n      message: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  update(type) {\n    return e => {\n      this.setState({ [type]: e.target.value });\n    };\n  }\n\n  handleSubmit(e, newReview) {\n    e.preventDefault();\n    let body = this.state.body;\n\n    newReview({\n      variables: {\n        body: body,\n        rating: parseInt(this.state.rating),\n        restaurantId: this.state.restaurantId\n      }\n    }).then(data => {\n      this.setState({\n        message: `New review created successfully`,\n        body: \"\",\n      });\n      setTimeout(() => document.location.reload(true), 1000);\n    });\n  }\n\n  updateCache(\n    cache,\n    {\n      data: { newReview }\n    }\n  ) {\n    let reviews;\n    try {\n      reviews = cache.readQuery({ query: FETCH_REVIEWS });\n    } catch (err) {\n      return;\n    }\n\n    if (reviews) {\n      let reviewArray = reviews.reviews;\n      cache.writeQuery({\n        query: FETCH_REVIEWS,\n        data: { reviews: reviewArray.concat(newReview) }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <Mutation\n        mutation={NEW_REVIEW}\n        update={(cache, data) => this.updateCache(cache, data)}\n      >\n        {(newReview, { data }) => (\n          <div className=\"new-review-form\">\n            <div className=\"review-form-text\">New Review</div>\n            <form\n              onSubmit={e => this.handleSubmit(e, newReview)}\n              className=\"inner-review-form\"\n            >\n              {/* <input\n                className=\"review-form-input\"\n                onChange={this.update(\"rating\")}\n                value={this.state.rating}\n                placeholder=\"Rating goes here (1-5)\"\n              /> */}\n            <input \n                className='far fa-star'\n              type=\"submit\"/>\n\n\n\n              <textarea\n                className=\"review-form-textarea\"\n                value={this.state.description}\n                onChange={this.update(\"body\")}\n                placeholder=\"Review goes here (Optional)\"\n              />\n              <button className=\"create-review-btn\" type=\"submit\" >\n                Create Review\n              </button>\n            </form>\n            <p>{this.state.message}</p>\n          </div>\n        )}\n      </Mutation>\n    );\n  }\n}\n\nexport default ReviewNew;\n"]},"metadata":{},"sourceType":"module"}