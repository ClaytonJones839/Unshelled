{"ast":null,"code":"var _jsxFileName = \"/Users/clay/Desktop/Unshelled/client/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\"; // import { ApolloLink } from \"apollo-link\";\n\nimport Mutations from \"./graphql/mutations\"; // import { persistCache } from 'apollo-cache-persist';\n// import AsyncStorage from '@react-native-community/async-storage';\n\nimport \"./css/loader.css\";\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n}); // make sure we log any additional errors we receive\n\nconst errorLink = onError(({\n  graphQLErrors\n}) => {\n  if (graphQLErrors) graphQLErrors.map(({\n    message\n  }) => console.log(message));\n});\nconst VERIFY_USER = Mutations.VERIFY_USER; // if we have a token we want to verify the user is actually logged in\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  resolvers: {},\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  },\n  connectToDevTools: true\n});\nconst token = localStorage.getItem(\"auth-token\"); // to avoid components async problems where\n// a component would try to read the cache's value of isLoggedIn\n// before our mutation goes through we can set it up here\n\ncache.writeData({\n  data: {\n    _id: \"\",\n    isLoggedIn: Boolean(token),\n    cart: [],\n    firstName: \"\",\n    lastName: \"\",\n    photo: \"\"\n  }\n}); // then if we do have a token we'll go through with our mutation\n\nif (token) {\n  client // use the VERIFY_USER mutation directly use the returned data to know if the returned\n  // user is loggedIn\n  .mutate({\n    mutation: VERIFY_USER,\n    variables: {\n      token\n    }\n  }).then(({\n    data\n  }) => {\n    // debugger;\n    cache.writeData({\n      data: {\n        _id: data.verifyUser._id,\n        isLoggedIn: data.verifyUser.isLoggedIn,\n        cart: [],\n        firstName: data.verifyUser.firstName,\n        lastName: data.verifyUser.lastName,\n        photo: data.verifyUser.photo\n      }\n    });\n  }); // debugger;\n} else {\n  // otherwise we can just set isLoggedIn to false\n  cache.writeData({\n    data: {\n      isLoggedIn: false,\n      cart: []\n    }\n  });\n}\n\nconst Root = () => {\n  // debugger;\n  const isLoggedIn = client.cache.data.data.ROOT_QUERY.lastName;\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/clay/Desktop/Unshelled/client/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","onError","Mutations","cache","dataIdFromObject","object","_id","httpLink","uri","headers","authorization","localStorage","getItem","errorLink","graphQLErrors","map","message","console","log","VERIFY_USER","client","link","resolvers","networkError","connectToDevTools","token","writeData","data","isLoggedIn","Boolean","cart","firstName","lastName","photo","mutate","mutation","variables","then","verifyUser","Root","ROOT_QUERY","render","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\n// import { ApolloLink } from \"apollo-link\";\nimport Mutations from \"./graphql/mutations\"; \n// import { persistCache } from 'apollo-cache-persist';\n// import AsyncStorage from '@react-native-community/async-storage';\n\nimport \"./css/loader.css\";\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\n\n\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n});\n\n// make sure we log any additional errors we receive\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n});\n\n\nconst { VERIFY_USER } = Mutations;\n// if we have a token we want to verify the user is actually logged in\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  resolvers: {},\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  },\n  connectToDevTools: true\n});\n\nconst token = localStorage.getItem(\"auth-token\");\n\n// to avoid components async problems where\n// a component would try to read the cache's value of isLoggedIn\n// before our mutation goes through we can set it up here\ncache.writeData({\n  data: {\n    _id: \"\",\n    isLoggedIn: Boolean(token),\n    cart: [],\n    firstName: \"\",\n    lastName: \"\",\n    photo: \"\"\n  }\n});\n\n// then if we do have a token we'll go through with our mutation\nif (token) {\n  client\n    // use the VERIFY_USER mutation directly use the returned data to know if the returned\n    // user is loggedIn\n    .mutate({ mutation: VERIFY_USER, variables: { token } })\n    .then(({ data }) => {\n      // debugger;\n      cache.writeData({\n        data: {\n          _id: data.verifyUser._id,\n          isLoggedIn: data.verifyUser.isLoggedIn,\n          cart: [],\n          firstName: data.verifyUser.firstName,\n          lastName: data.verifyUser.lastName,\n          photo: data.verifyUser.photo\n        }\n      });\n    });\n  // debugger;\n} else {\n  // otherwise we can just set isLoggedIn to false\n  cache.writeData({\n    data: {\n      isLoggedIn: false,\n      cart: []\n    }\n  });\n}\n\nconst Root = () => {\n  // debugger;\n  const isLoggedIn = client.cache.data.data.ROOT_QUERY.lastName;\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n"]},"metadata":{},"sourceType":"module"}