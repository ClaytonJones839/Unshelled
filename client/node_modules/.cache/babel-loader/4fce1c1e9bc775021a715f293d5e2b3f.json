{"ast":null,"code":"var _jsxFileName = \"/Users/clay/Desktop/Unshelled/client/src/components/Register.js\";\nimport React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../graphql/mutations\";\nimport SessionCSS from \"../Session.css\";\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      username: \"\",\n      firstName: \"\",\n      lastName: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({\n      [field]: e.target.value\n    });\n  }\n\n  updateCache(client, {\n    data\n  }) {\n    console.log(data); // here we can write directly to our cache with our returned mutation data\n\n    client.writeData({\n      data: {\n        isLoggedIn: data.register.loggedIn\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Mutation, {\n      mutation: Mutations.REGISTER_USER,\n      onCompleted: data => {\n        const token = data.register.token;\n        localStorage.setItem(\"auth-token\", token);\n        this.props.history.push(\"/\");\n      },\n      update: (client, data) => this.updateCache(client, data),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, registerUser => React.createElement(\"div\", {\n      className: \"login-page-wrap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        registerUser({\n          variables: {\n            email: this.state.email,\n            password: this.state.password,\n            username: this.state.username,\n            firstName: this.state.firstName,\n            lastName: this.state.lastName\n          }\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.state.username,\n      onChange: this.update(\"username\"),\n      placeholder: \"Username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.firstName,\n      onChange: this.update(\"firstName\"),\n      placeholder: \"First Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.lastName,\n      onChange: this.update(\"lastName\"),\n      placeholder: \"Last Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.email,\n      onChange: this.update(\"email\"),\n      placeholder: \"Email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.password,\n      onChange: this.update(\"password\"),\n      type: \"password\",\n      placeholder: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Register\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/clay/Desktop/Unshelled/client/src/components/Register.js"],"names":["React","Component","Mutation","Mutations","SessionCSS","Register","constructor","props","state","email","password","username","firstName","lastName","update","field","e","setState","target","value","updateCache","client","data","console","log","writeData","isLoggedIn","register","loggedIn","render","REGISTER_USER","token","localStorage","setItem","history","push","registerUser","preventDefault","variables"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,UAAP,MAAuB,gBAAvB;AAEA,eAAe,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC5CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTC,MAAAA,QAAQ,EAAE,EAHD;AAITC,MAAAA,SAAS,EAAE,EAJF;AAKTC,MAAAA,QAAQ,EAAE;AALD,KAAb;AAOH;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,WAAOC,CAAC,IAAI,KAAKC,QAAL,CAAc;AAAE,OAACF,KAAD,GAASC,CAAC,CAACE,MAAF,CAASC;AAApB,KAAd,CAAZ;AACH;;AAEDC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAAEC,IAAAA;AAAF,GAAT,EAAmB;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAD0B,CAE1B;;AACAD,IAAAA,MAAM,CAACI,SAAP,CAAiB;AACbH,MAAAA,IAAI,EAAE;AAAEI,QAAAA,UAAU,EAAEJ,IAAI,CAACK,QAAL,CAAcC;AAA5B;AADO,KAAjB;AAGH;;AAEDC,EAAAA,MAAM,GAAG;AACL,WACI,oBAAC,QAAD;AACI,MAAA,QAAQ,EAAE1B,SAAS,CAAC2B,aADxB;AAEI,MAAA,WAAW,EAAER,IAAI,IAAI;AAAA,cACTS,KADS,GACCT,IAAI,CAACK,QADN,CACTI,KADS;AAEjBC,QAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCF,KAAnC;AACA,aAAKxB,KAAL,CAAW2B,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,OANL;AAOI,MAAA,MAAM,EAAE,CAACd,MAAD,EAASC,IAAT,KAAkB,KAAKF,WAAL,CAAiBC,MAAjB,EAAyBC,IAAzB,CAP9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASKc,YAAY,IACT;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,QAAQ,EAAEpB,CAAC,IAAI;AACXA,QAAAA,CAAC,CAACqB,cAAF;AACAD,QAAAA,YAAY,CAAC;AACTE,UAAAA,SAAS,EAAE;AACP7B,YAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KADX;AAEPC,YAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE,QAFd;AAGPC,YAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QAHd;AAIPC,YAAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWI,SAJf;AAKPC,YAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK;AALd;AADF,SAAD,CAAZ;AASH,OAZL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAcI;AACI,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWG,QADtB;AAEI,MAAA,QAAQ,EAAE,KAAKG,MAAL,CAAY,UAAZ,CAFd;AAGI,MAAA,WAAW,EAAC,UAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdJ,EAmBI;AACI,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWI,SADtB;AAEI,MAAA,QAAQ,EAAE,KAAKE,MAAL,CAAY,WAAZ,CAFd;AAGI,MAAA,WAAW,EAAC,YAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnBJ,EAwBI;AACI,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWK,QADtB;AAEI,MAAA,QAAQ,EAAE,KAAKC,MAAL,CAAY,UAAZ,CAFd;AAGI,MAAA,WAAW,EAAC,WAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBJ,EA6BI;AACI,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWC,KADtB;AAEI,MAAA,QAAQ,EAAE,KAAKK,MAAL,CAAY,OAAZ,CAFd;AAGI,MAAA,WAAW,EAAC,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BJ,EAkCI;AACI,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWE,QADtB;AAEI,MAAA,QAAQ,EAAE,KAAKI,MAAL,CAAY,UAAZ,CAFd;AAGI,MAAA,IAAI,EAAC,UAHT;AAII,MAAA,WAAW,EAAC,UAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAlCJ,EAwCI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAxCJ,CADJ,CAVR,CADJ;AA0DH;;AApF2C","sourcesContent":["import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../graphql/mutations\";\nimport SessionCSS from \"../Session.css\"\n\nexport default class Register extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            email: \"\",\n            password: \"\",\n            username: \"\",\n            firstName: \"\",\n            lastName: \"\"\n        };\n    }\n\n    update(field) {\n        return e => this.setState({ [field]: e.target.value });\n    }\n\n    updateCache(client, { data }) {\n        console.log(data);\n        // here we can write directly to our cache with our returned mutation data\n        client.writeData({\n            data: { isLoggedIn: data.register.loggedIn }\n        });\n    }\n\n    render() {\n        return (\n            <Mutation\n                mutation={Mutations.REGISTER_USER}\n                onCompleted={data => {\n                    const { token } = data.register;\n                    localStorage.setItem(\"auth-token\", token);\n                    this.props.history.push(\"/\");\n                }}\n                update={(client, data) => this.updateCache(client, data)}\n            >\n                {registerUser => (\n                    <div className=\"login-page-wrap\">\n                        <form\n                            onSubmit={e => {\n                                e.preventDefault();\n                                registerUser({\n                                    variables: {\n                                        email: this.state.email,\n                                        password: this.state.password,\n                                        username: this.state.username,\n                                        firstName: this.state.firstName,\n                                        lastName: this.state.lastName,\n                                    }\n                                });\n                            }}\n                        >\n                            <input\n                                value={this.state.username}\n                                onChange={this.update(\"username\")}\n                                placeholder=\"Username\"\n                            />\n                            <input\n                                value={this.state.firstName}\n                                onChange={this.update(\"firstName\")}\n                                placeholder=\"First Name\"\n                            />\n                            <input\n                                value={this.state.lastName}\n                                onChange={this.update(\"lastName\")}\n                                placeholder=\"Last Name\"\n                            />\n                            <input\n                                value={this.state.email}\n                                onChange={this.update(\"email\")}\n                                placeholder=\"Email\"\n                            />\n                            <input\n                                value={this.state.password}\n                                onChange={this.update(\"password\")}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />\n                            <button type=\"submit\">Register</button>\n                        </form>\n                    </div>\n                )}\n            </Mutation>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}