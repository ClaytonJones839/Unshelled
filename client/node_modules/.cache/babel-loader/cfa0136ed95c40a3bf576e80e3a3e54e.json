{"ast":null,"code":"var _jsxFileName = \"/Users/clay/Desktop/Unshelled/client/src/index.js\";\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// \n// import App from \"./components/App\";\n// import ApolloClient from \"apollo-client\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// // import { createHttpLink } from \"apollo-link-http\";\n// import { ApolloProvider } from \"react-apollo\";\n// // import { onError } from \"apollo-link-error\";\n// // import { ApolloLink } from \"apollo-link\";\n// // import Mutations from \"./graphql/mutations\"; \n// import \"./css/loader.css\";\n// const cache = new InMemoryCache({\n//   dataIdFromObject: object => object._id || null\n// });\n// // const httpLink = createHttpLink({\n// //   uri: \"http://localhost:5000/graphql\",\n// //   headers: {\n// //     // pass our token into the header of each request\n// //     authorization: localStorage.getItem(\"auth-token\")\n// //   }\n// // });\n// // make sure we log any additional errors we receive\n// // const errorLink = onError(({ graphQLErrors }) => {\n// //   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// // });\n// // const { VERIFY_USER } = Mutations;\n// // if we have a token we want to verify the user is actually logged in\n// const client = new ApolloClient({\n//   link: \"http://localhost:5000/graphql\",\n//   cache,\n//   headers: {\n//     // pass our token into the header of each request\n//     authorization: localStorage.getItem(\"auth-token\")\n//   },\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log(\"graphQLErrors\", graphQLErrors);\n//     console.log(\"networkError\", networkError);\n//   }\n// });\n// // const token = localStorage.getItem(\"auth-token\");\n// // to avoid components async problems where\n// // a component would try to read the cache's value of isLoggedIn\n// // before our mutation goes through we can set it up here\n// cache.writeData({\n//   data: {\n//     isLoggedIn: Boolean(token),\n//     banana: \"banana\"\n//   }\n// });\n// // then if we do have a token we'll go through with our mutation\n// if (token) {\n//   client\n//     // use the VERIFY_USER mutation directly use the returned data to know if the returned\n//     // user is loggedIn\n//     .mutate({ mutation: VERIFY_USER, variables: { token } })\n//     .then(({ data }) => {\n//       debugger;\n//       cache.writeData({\n//         data: {\n//           _id: data.verifyUser.id,\n//           isLoggedIn: data.verifyUser.loggedIn,\n//           firstName: data.verifyUser.firstName,\n//           lastName: data.verifyUser.lastName,\n//           photo: data.verifyUser.photo\n//         }\n//       });\n//     });\n//   debugger;\n// } else {\n//   // otherwise we can just set isLoggedIn to false\n//   cache.writeData({\n//     data: {\n//       isLoggedIn: false,\n//       cart: []\n//     }\n//   });\n// }\n// const Root = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// };\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./src/components/App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport Mutations from \"./graphql/mutations\";\nimport { ApolloLink } from \"apollo-link\";\nconst VERIFY_USER = Mutations.VERIFY_USER;\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\nconst token = localStorage.getItem(\"auth-token\");\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(token)\n  }\n});\n\nif (token) {\n  client.mutate({\n    mutation: VERIFY_USER,\n    variables: {\n      token\n    }\n  }).then(({\n    data\n  }) => {\n    cache.writeData({\n      data: {\n        isLoggedIn: data.verifyUser.loggedIn\n      }\n    });\n  });\n}\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\"\n});\nconst errorLink = onError(({\n  graphQLErrors\n}) => {\n  if (graphQLErrors) graphQLErrors.map(({\n    message\n  }) => console.log(message));\n});\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\nconst Root = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 163\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/clay/Desktop/Unshelled/client/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","onError","Mutations","ApolloLink","VERIFY_USER","cache","dataIdFromObject","object","_id","token","localStorage","getItem","writeData","data","isLoggedIn","Boolean","client","mutate","mutation","variables","then","verifyUser","loggedIn","httpLink","uri","errorLink","graphQLErrors","map","message","console","log","link","networkError","Root","render","document","getElementById"],"mappings":"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","sourcesContent":["// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// \n// import App from \"./components/App\";\n// import ApolloClient from \"apollo-client\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// // import { createHttpLink } from \"apollo-link-http\";\n// import { ApolloProvider } from \"react-apollo\";\n// // import { onError } from \"apollo-link-error\";\n// // import { ApolloLink } from \"apollo-link\";\n// // import Mutations from \"./graphql/mutations\"; \n// import \"./css/loader.css\";\n\n// const cache = new InMemoryCache({\n//   dataIdFromObject: object => object._id || null\n// });\n\n// // const httpLink = createHttpLink({\n// //   uri: \"http://localhost:5000/graphql\",\n// //   headers: {\n// //     // pass our token into the header of each request\n// //     authorization: localStorage.getItem(\"auth-token\")\n// //   }\n// // });\n\n// // make sure we log any additional errors we receive\n// // const errorLink = onError(({ graphQLErrors }) => {\n// //   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// // });\n\n\n// // const { VERIFY_USER } = Mutations;\n// // if we have a token we want to verify the user is actually logged in\n\n// const client = new ApolloClient({\n//   link: \"http://localhost:5000/graphql\",\n//   cache,\n//   headers: {\n//     // pass our token into the header of each request\n//     authorization: localStorage.getItem(\"auth-token\")\n//   },\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log(\"graphQLErrors\", graphQLErrors);\n//     console.log(\"networkError\", networkError);\n//   }\n// });\n\n// // const token = localStorage.getItem(\"auth-token\");\n\n// // to avoid components async problems where\n// // a component would try to read the cache's value of isLoggedIn\n// // before our mutation goes through we can set it up here\n// cache.writeData({\n//   data: {\n//     isLoggedIn: Boolean(token),\n\n//     banana: \"banana\"\n//   }\n// });\n\n// // then if we do have a token we'll go through with our mutation\n// if (token) {\n//   client\n//     // use the VERIFY_USER mutation directly use the returned data to know if the returned\n//     // user is loggedIn\n//     .mutate({ mutation: VERIFY_USER, variables: { token } })\n//     .then(({ data }) => {\n//       debugger;\n//       cache.writeData({\n//         data: {\n//           _id: data.verifyUser.id,\n//           isLoggedIn: data.verifyUser.loggedIn,\n//           firstName: data.verifyUser.firstName,\n//           lastName: data.verifyUser.lastName,\n//           photo: data.verifyUser.photo\n//         }\n//       });\n//     });\n//   debugger;\n// } else {\n//   // otherwise we can just set isLoggedIn to false\n//   cache.writeData({\n//     data: {\n//       isLoggedIn: false,\n//       cart: []\n//     }\n//   });\n// }\n\n// const Root = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// };\n\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./src/components/App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport Mutations from \"./graphql/mutations\"; \nimport { ApolloLink } from \"apollo-link\";\nconst { VERIFY_USER } = Mutations;\n\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\n\nconst token = localStorage.getItem(\"auth-token\");\n\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(token)\n  }\n});\n\nif (token) {\n  client\n    .mutate({ mutation: VERIFY_USER, variables: { token } })\n    .then(({ data }) => {\n      cache.writeData({\n        data: {\n          isLoggedIn: data.verifyUser.loggedIn\n        }\n      });\n    });\n}\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\"\n});\n\nconst errorLink = onError(({ graphQLErrors }) => {\n  if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\n\n\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}