{"ast":null,"code":"var _jsxFileName = \"/Users/clay/Desktop/Unshelled/client/src/index.js\";\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import App from \"./components/App\";\n// import ApolloClient from \"apollo-client\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// // import { createHttpLink } from \"apollo-link-http\";\n// import { ApolloProvider } from \"react-apollo\";\n// // import { onError } from \"apollo-link-error\";\n// // import { ApolloLink } from \"apollo-link\";\n// // import Mutations from \"./graphql/mutations\"; \n// import \"./css/loader.css\";\n// const cache = new InMemoryCache({\n//   dataIdFromObject: object => object._id || null\n// });\n// // const httpLink = createHttpLink({\n// //   uri: \"http://localhost:5000/graphql\",\n// //   headers: {\n// //     // pass our token into the header of each request\n// //     authorization: localStorage.getItem(\"auth-token\")\n// //   }\n// // });\n// // make sure we log any additional errors we receive\n// // const errorLink = onError(({ graphQLErrors }) => {\n// //   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// // });\n// // const { VERIFY_USER } = Mutations;\n// // if we have a token we want to verify the user is actually logged in\n// const client = new ApolloClient({\n//   link: \"http://localhost:5000/graphql\",\n//   cache,\n//   headers: {\n//     // pass our token into the header of each request\n//     authorization: localStorage.getItem(\"auth-token\")\n//   },\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log(\"graphQLErrors\", graphQLErrors);\n//     console.log(\"networkError\", networkError);\n//   }\n// });\n// // const token = localStorage.getItem(\"auth-token\");\n// // to avoid components async problems where\n// // a component would try to read the cache's value of isLoggedIn\n// // before our mutation goes through we can set it up here\n// cache.writeData({\n//   data: {\n//     isLoggedIn: Boolean(token),\n//     banana: \"banana\"\n//   }\n// });\n// // then if we do have a token we'll go through with our mutation\n// if (token) {\n//   client\n//     // use the VERIFY_USER mutation directly use the returned data to know if the returned\n//     // user is loggedIn\n//     .mutate({ mutation: VERIFY_USER, variables: { token } })\n//     .then(({ data }) => {\n//       debugger;\n//       cache.writeData({\n//         data: {\n//           _id: data.verifyUser.id,\n//           isLoggedIn: data.verifyUser.loggedIn,\n//           firstName: data.verifyUser.firstName,\n//           lastName: data.verifyUser.lastName,\n//           photo: data.verifyUser.photo\n//         }\n//       });\n//     });\n//   debugger;\n// } else {\n//   // otherwise we can just set isLoggedIn to false\n//   cache.writeData({\n//     data: {\n//       isLoggedIn: false,\n//       cart: []\n//     }\n//   });\n// }\n// const Root = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// };\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { VERIFY_USER } from \"./graphql/mutations\";\nimport \"./css/loader.css\";\nimport App from \"./components/App\"; // set up our Cache for Apollo\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object.id || null\n});\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n}); // set up our client instance with the cache and a uri to know where data\n// will be coming from\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n  cache,\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  },\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(localStorage.getItem(\"auth-token\"))\n  }\n}); // Setup our Apollo Provider so that our entire application\n// will have access to the Apollo and the cache\n\nconst Root = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 154\n  },\n  __self: this\n}), document.querySelector(\"#root\"));","map":{"version":3,"sources":["/Users/clay/Desktop/Unshelled/client/src/index.js"],"names":["React","ReactDOM","HashRouter","ApolloClient","ApolloProvider","InMemoryCache","VERIFY_USER","App","cache","dataIdFromObject","object","id","httpLink","createHttpLink","uri","headers","authorization","localStorage","getItem","client","onError","networkError","graphQLErrors","console","log","writeData","data","isLoggedIn","Boolean","Root","render","document","querySelector"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAO,kBAAP;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CAEA;;AACA,MAAMC,KAAK,GAAG,IAAIH,aAAJ,CAAkB;AAC9BI,EAAAA,gBAAgB,EAAEC,MAAM,IAAIA,MAAM,CAACC,EAAP,IAAa;AADX,CAAlB,CAAd;AAIA,MAAMC,QAAQ,GAAGC,cAAc,CAAC;AAC9BC,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,YAArB;AAFR;AAFqB,CAAD,CAA/B,C,CASA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;AAC9BW,EAAAA,GAAG,EAAE,+BADyB;AAE9BN,EAAAA,KAF8B;AAG9BO,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,YAArB;AAFR,GAHqB;AAO9BE,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,KAAqC;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACD;AAV6B,CAAjB,CAAf;AAaAb,KAAK,CAACiB,SAAN,CAAgB;AACdC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEC,OAAO,CAACX,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAD;AADf;AADQ,CAAhB,E,CAMA;AACA;;AACA,MAAMW,IAAI,GAAG,MAAM;AACjB,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEV,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADF;AAKD,CAND;;AAQAlB,QAAQ,CAAC6B,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAA1B","sourcesContent":["// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import App from \"./components/App\";\n// import ApolloClient from \"apollo-client\";\n// import { InMemoryCache } from \"apollo-cache-inmemory\";\n// // import { createHttpLink } from \"apollo-link-http\";\n// import { ApolloProvider } from \"react-apollo\";\n// // import { onError } from \"apollo-link-error\";\n// // import { ApolloLink } from \"apollo-link\";\n// // import Mutations from \"./graphql/mutations\"; \n// import \"./css/loader.css\";\n\n// const cache = new InMemoryCache({\n//   dataIdFromObject: object => object._id || null\n// });\n\n// // const httpLink = createHttpLink({\n// //   uri: \"http://localhost:5000/graphql\",\n// //   headers: {\n// //     // pass our token into the header of each request\n// //     authorization: localStorage.getItem(\"auth-token\")\n// //   }\n// // });\n\n// // make sure we log any additional errors we receive\n// // const errorLink = onError(({ graphQLErrors }) => {\n// //   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// // });\n\n\n// // const { VERIFY_USER } = Mutations;\n// // if we have a token we want to verify the user is actually logged in\n\n// const client = new ApolloClient({\n//   link: \"http://localhost:5000/graphql\",\n//   cache,\n//   headers: {\n//     // pass our token into the header of each request\n//     authorization: localStorage.getItem(\"auth-token\")\n//   },\n//   onError: ({ networkError, graphQLErrors }) => {\n//     console.log(\"graphQLErrors\", graphQLErrors);\n//     console.log(\"networkError\", networkError);\n//   }\n// });\n\n// // const token = localStorage.getItem(\"auth-token\");\n\n// // to avoid components async problems where\n// // a component would try to read the cache's value of isLoggedIn\n// // before our mutation goes through we can set it up here\n// cache.writeData({\n//   data: {\n//     isLoggedIn: Boolean(token),\n\n//     banana: \"banana\"\n//   }\n// });\n\n// // then if we do have a token we'll go through with our mutation\n// if (token) {\n//   client\n//     // use the VERIFY_USER mutation directly use the returned data to know if the returned\n//     // user is loggedIn\n//     .mutate({ mutation: VERIFY_USER, variables: { token } })\n//     .then(({ data }) => {\n//       debugger;\n//       cache.writeData({\n//         data: {\n//           _id: data.verifyUser.id,\n//           isLoggedIn: data.verifyUser.loggedIn,\n//           firstName: data.verifyUser.firstName,\n//           lastName: data.verifyUser.lastName,\n//           photo: data.verifyUser.photo\n//         }\n//       });\n//     });\n//   debugger;\n// } else {\n//   // otherwise we can just set isLoggedIn to false\n//   cache.writeData({\n//     data: {\n//       isLoggedIn: false,\n//       cart: []\n//     }\n//   });\n// }\n\n// const Root = () => {\n//   return (\n//     <ApolloProvider client={client}>\n//       <App />\n//     </ApolloProvider>\n//   );\n// };\n\n// ReactDOM.render(<Root />, document.getElementById(\"root\"));\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { VERIFY_USER } from \"./graphql/mutations\";\nimport \"./css/loader.css\";\nimport App from \"./components/App\";\n\n// set up our Cache for Apollo\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object.id || null\n});\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n});\n\n\n// set up our client instance with the cache and a uri to know where data\n// will be coming from\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\",\n  cache,\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  },\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(localStorage.getItem(\"auth-token\"))\n  }\n});\n\n// Setup our Apollo Provider so that our entire application\n// will have access to the Apollo and the cache\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Root />, document.querySelector(\"#root\"));"]},"metadata":{},"sourceType":"module"}