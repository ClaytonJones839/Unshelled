{"ast":null,"code":"var _jsxFileName = \"/Users/clay/Desktop/Unshelled/client/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\"; // import { onError } from \"apollo-link-error\";\n// import { ApolloLink } from \"apollo-link\";\n\nimport Mutations from \"./graphql/mutations\";\nimport \"./css/loader.css\";\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n}); // make sure we log any additional errors we receive\n\nconst VERIFY_USER = Mutations.VERIFY_USER; // if we have a token we want to verify the user is actually logged in\n\nconst token = localStorage.getItem(\"auth-token\");\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n}); // const errorLink = onError(({ graphQLErrors }) => {\n//   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// });\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({\n    networkError,\n    graphQLErrors\n  }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n}); // to avoid components async problems where\n// a component would try to read the cache's value of isLoggedIn\n// before our mutation goes through we can set it up here\n\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(token),\n    id: null\n  }\n}); // then if we do have a token we'll go through with our mutation\n\nif (token) {\n  client // use the VERIFY_USER mutation directly use the returned data to know if the returned\n  // user is loggedIn\n  .mutate({\n    mutation: VERIFY_USER,\n    variables: {\n      token\n    }\n  }).then(({\n    data\n  }) => {\n    cache.writeData({\n      data: {\n        isLoggedIn: data.verifyUser.loggedIn,\n        cart: []\n      }\n    });\n  });\n} else {\n  // otherwise we can just set isLoggedIn to false\n  cache.writeData({\n    data: {\n      isLoggedIn: false,\n      cart: []\n    }\n  });\n}\n\nconst Root = () => {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(App, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n};\n\nReactDOM.render(React.createElement(Root, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/Users/clay/Desktop/Unshelled/client/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","Mutations","httpLink","uri","headers","authorization","localStorage","getItem","VERIFY_USER","token","cache","dataIdFromObject","object","_id","client","link","onError","networkError","graphQLErrors","console","log","writeData","data","isLoggedIn","Boolean","id","mutate","mutation","variables","then","verifyUser","loggedIn","cart","Root","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,cAA/B,C,CACA;AACA;;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAO,kBAAP;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAE,+BADyB;AAE9BC,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,aAAa,EAAEC,YAAY,CAACC,OAAb,CAAqB,YAArB;AAFR;AAFqB,CAAD,CAA/B,C,CAOA;;MACQC,W,GAAgBP,S,CAAhBO,W,EACR;;AACA,MAAMC,KAAK,GAAGH,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAd;AAEA,MAAMG,KAAK,GAAG,IAAIZ,aAAJ,CAAkB;AAC9Ba,EAAAA,gBAAgB,EAAEC,MAAM,IAAIA,MAAM,CAACC,GAAP,IAAc;AADZ,CAAlB,CAAd,C,CAGA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BkB,EAAAA,IAAI,EAAEb,QADwB;AAE9BQ,EAAAA,KAF8B;AAG9BM,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,KAAqC;AAC5CC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACD;AAN6B,CAAjB,CAAf,C,CASA;AACA;AACA;;AACAP,KAAK,CAACW,SAAN,CAAgB;AACdC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEC,OAAO,CAACf,KAAD,CADf;AAEJgB,IAAAA,EAAE,EAAE;AAFA;AADQ,CAAhB,E,CAOA;;AACA,IAAIhB,KAAJ,EAAW;AACTK,EAAAA,MAAM,CACJ;AACA;AAFI,GAGHY,MAHH,CAGU;AAAEC,IAAAA,QAAQ,EAAEnB,WAAZ;AAAyBoB,IAAAA,SAAS,EAAE;AAAEnB,MAAAA;AAAF;AAApC,GAHV,EAIGoB,IAJH,CAIQ,CAAC;AAAEP,IAAAA;AAAF,GAAD,KAAc;AAClBZ,IAAAA,KAAK,CAACW,SAAN,CAAgB;AACdC,MAAAA,IAAI,EAAE;AACJC,QAAAA,UAAU,EAAED,IAAI,CAACQ,UAAL,CAAgBC,QADxB;AAEJC,QAAAA,IAAI,EAAE;AAFF;AADQ,KAAhB;AAMD,GAXH;AAYD,CAbD,MAaO;AACL;AACAtB,EAAAA,KAAK,CAACW,SAAN,CAAgB;AACdC,IAAAA,IAAI,EAAE;AACJC,MAAAA,UAAU,EAAE,KADR;AAEJS,MAAAA,IAAI,EAAE;AAFF;AADQ,GAAhB;AAMD;;AAED,MAAMC,IAAI,GAAG,MAAM;AACjB,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEnB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;AAQAnB,QAAQ,CAACuC,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\n// import { onError } from \"apollo-link-error\";\n// import { ApolloLink } from \"apollo-link\";\nimport Mutations from \"./graphql/mutations\"; \nimport \"./css/loader.css\";\n\nconst httpLink = createHttpLink({\n  uri: \"http://localhost:5000/graphql\",\n  headers: {\n    // pass our token into the header of each request\n    authorization: localStorage.getItem(\"auth-token\")\n  }\n});\n// make sure we log any additional errors we receive\nconst { VERIFY_USER } = Mutations;\n// if we have a token we want to verify the user is actually logged in\nconst token = localStorage.getItem(\"auth-token\");\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: object => object._id || null\n});\n// const errorLink = onError(({ graphQLErrors }) => {\n//   if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n// });\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache,\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log(\"graphQLErrors\", graphQLErrors);\n    console.log(\"networkError\", networkError);\n  }\n});\n\n// to avoid components async problems where\n// a component would try to read the cache's value of isLoggedIn\n// before our mutation goes through we can set it up here\ncache.writeData({\n  data: {\n    isLoggedIn: Boolean(token),\n    id: null\n  }\n});\n\n// then if we do have a token we'll go through with our mutation\nif (token) {\n  client\n    // use the VERIFY_USER mutation directly use the returned data to know if the returned\n    // user is loggedIn\n    .mutate({ mutation: VERIFY_USER, variables: { token } })\n    .then(({ data }) => {\n      cache.writeData({\n        data: {\n          isLoggedIn: data.verifyUser.loggedIn,\n          cart: []\n        }\n      });\n    });\n} else {\n  // otherwise we can just set isLoggedIn to false\n  cache.writeData({\n    data: {\n      isLoggedIn: false,\n      cart: []\n    }\n  });\n}\n\nconst Root = () => {\n  return (\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Root />, document.getElementById(\"root\"));\n\n"]},"metadata":{},"sourceType":"module"}